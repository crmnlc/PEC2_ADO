targetsnew[1:5,], booktabs = TRUE,
caption = 'Tabla de información de cada muestra para las 5 primeras muestras'
)
# Chunk 10: tab2
knitr::kable(
countsnew[1:5, 1:5], booktabs = TRUE,
caption = 'Matriz de conteos del estudio en la que aparecen los 5 primeros genes y las 5 primeras muestras'
)
# Chunk 11
colnames(countsnew) == targetsnew$Sample_Name
# Chunk 12
ddsMat <- DESeqDataSetFromMatrix(countData = countsnew,
colData = targetsnew,
design = ~ Group)
ddsMat
# Chunk 13
# Número de filas que tiene el archivo DESeqDataSet
nrow(ddsMat)
# Chunk 14
# Subconjunto de DESeqDataSet, quedándonos con las filas con sumatorio de conteos mayores a 1 y guardamos este cambio en el objeto.
keep <- rowSums(counts(ddsMat)) > 1
ddsMat <- ddsMat[keep,]
nrow(ddsMat)
# Chunk 15
vsd <- vst(ddsMat, blind = FALSE)
head(assay(vsd), 3)
# Chunk 16
rld <- rlog(ddsMat, blind = FALSE)
head(assay(rld), 3)
# Chunk 17
library("dplyr")
library("ggplot2")
ddsMat <- estimateSizeFactors(ddsMat)
df <- bind_rows(
as.data.frame(log2(counts(ddsMat, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as.data.frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
as.data.frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))
colnames(df)[1:2] <- c("x", "y")
lvls <- c("log2(x + 1)", "vst", "rlog")
df$transformation <- factor(df$transformation, levels=lvls)
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
# Chunk 18: fig2
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/transformations.png")
# Chunk 19
sampleDists <- dist(t(assay(vsd)))
sampleDists
# Chunk 20
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <-  vsd$ShortName
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <-  vsd$ShortName
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
# Chunk 21: fig3
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/distanciasVST.png")
# Chunk 22
library("PoiClaClu")
poisd <- PoissonDistance(t(counts(ddsMat)))
# Chunk 23
samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- ddsMat$ShortName
colnames(samplePoisDistMatrix) <- NULL
pheatmap(samplePoisDistMatrix,
clustering_distance_rows = poisd$dd,
clustering_distance_cols = poisd$dd,
col = colors)
# Chunk 24: fig4
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/distanciasVST.png")
# Chunk 25
plotPCA(vsd, intgroup = c("Group", "sex"))
# Chunk 26: fig5
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/PCA_VST.png")
# Chunk 27
library("glmpca")
gpca <- glmpca(counts(ddsMat), L=2)
gpca.dat <- gpca$factors
gpca.dat$Group <- ddsMat$Group
gpca.dat$sex <- ddsMat$sex
# Chunk 28
ggplot(gpca.dat, aes(x = dim1, y = dim2, color = Group, shape = sex)) +
geom_point(size =3) + coord_fixed() + ggtitle("glmpca - Generalized PCA")
# Chunk 29: fig6
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/GLM_PCA.png")
# Chunk 30
mds <- as.data.frame(colData(vsd))  %>%
cbind(cmdscale(sampleDistMatrix))
ggplot(mds, aes(x = `1`, y = `2`, color = Group, shape = sex)) +
geom_point(size = 3) + coord_fixed() + ggtitle("MDS with VST data")
# Chunk 31
mdsPois <- as.data.frame(colData(ddsMat)) %>%
cbind(cmdscale(samplePoisDistMatrix))
ggplot(mdsPois, aes(x = `1`, y = `2`, color = Group, shape = sex)) +
geom_point(size = 3) + coord_fixed() + ggtitle("MDS with PoissonDistances")
# Chunk 32: fig7
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/MDS_VST.png")
# Chunk 33: fig8
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/MDS_Poisson.png")
# Chunk 34
ddsMat <- DESeq(ddsMat)
# Chunk 35
resSFI_NIT <- results(ddsMat, contrast=c("Group","SFI","NIT"))
resSFI_NIT
# Chunk 36
resELI_NIT <- results(ddsMat, contrast=c("Group","ELI","NIT"))
resELI_NIT
# Chunk 37
resELI_SFI <- results(ddsMat, contrast=c("Group","ELI","SFI"))
resELI_SFI
# Chunk 38
mcols(resSFI_NIT, use.names = TRUE)
# Chunk 39
summary(resSFI_NIT)
# Chunk 40
summary(resELI_NIT)
# Chunk 41
summary(resELI_SFI)
# Chunk 42
resSFI_NIT.05  <- results(ddsMat, contrast=c("Group","SFI","NIT"), alpha = 0.05)
table(resSFI_NIT.05$padj < 0.05)
# Chunk 43
resELI_NIT.05  <- results(ddsMat, contrast=c("Group","ELI","NIT"), alpha = 0.05)
table(resELI_NIT.05$padj < 0.05)
# Chunk 44
resELI_SFI.05  <- results(ddsMat, contrast=c("Group","ELI","SFI"), alpha = 0.05)
table(resELI_SFI.05$padj < 0.05)
# Chunk 45
resSFI_NITLFC1 <- results(ddsMat, contrast=c("Group","SFI","NIT"), lfcThreshold=1)
table(resSFI_NITLFC1$padj < 0.1)
# Chunk 46
resELI_NITLFC1 <- results(ddsMat, contrast=c("Group","ELI","NIT"), lfcThreshold=1)
table(resELI_NITLFC1$padj < 0.1)
# Chunk 47
resELI_SFILFC1 <- results(ddsMat, contrast=c("Group","ELI","SFI"), lfcThreshold=1)
table(resELI_SFILFC1$padj < 0.1)
# Chunk 48
sum(resSFI_NIT$padj < 0.1, na.rm=TRUE)
# Chunk 49
sum(resELI_NIT$padj < 0.1, na.rm=TRUE)
# Chunk 50
sum(resELI_SFI$padj < 0.1, na.rm=TRUE)
# Chunk 51
resSFI_NITSig <- subset(resSFI_NIT, padj < 0.1)
head(resSFI_NITSig[ order(resSFI_NITSig$log2FoldChange), ])
# Chunk 52
head(resSFI_NITSig[ order(resSFI_NITSig$log2FoldChange, decreasing = TRUE), ])
# Chunk 53
resELI_NITSig <- subset(resELI_NIT, padj < 0.1)
head(resELI_NITSig[ order(resELI_NITSig$log2FoldChange), ])
# Chunk 54
head(resELI_NITSig[ order(resELI_NITSig$log2FoldChange, decreasing = TRUE), ])
# Chunk 55
resELI_SFISig <- subset(resELI_SFI, padj < 0.1)
head(resELI_SFISig[ order(resELI_SFISig$log2FoldChange), ])
# Chunk 56
head(resELI_SFISig[ order(resELI_SFISig$log2FoldChange, decreasing = TRUE), ])
# Chunk 57
topGeneSFI_NIT <- rownames(resSFI_NIT)[which.min(resSFI_NIT$padj)]
plotCounts(ddsMat, gene = topGeneSFI_NIT, intgroup=c("Group"))
# Chunk 58
topGeneresELI_NIT <- rownames(resELI_NIT)[which.min(resELI_NIT$padj)]
plotCounts(ddsMat, gene = topGeneresELI_NIT, intgroup=c("Group"))
# Chunk 59
topGeneresELI_SFI <- rownames(resELI_SFI)[which.min(resELI_SFI$padj)]
plotCounts(ddsMat, gene = topGeneresELI_SFI, intgroup=c("Group"))
# Chunk 60: fig9
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/topGeneSFI_NIT.png")
# Chunk 61: fig10
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/topGeneELI_NIT.png")
# Chunk 62: fig11
knitr::include_graphics("D:/Users/Carmen/Desktop/Carmen/Curso_2019-2020/Master_bioinformatica_bioestadistica/ADO/PEC2/imagenes/topGeneELI_SFI.png")
# Chunk 63
library("AnnotationDbi")
library("org.Hs.eg.db")
# Chunk 64
columns(org.Hs.eg.db)
# Chunk 65
SFI_NITens.str <- substr(rownames(resSFI_NIT), 1, 15)
resSFI_NIT$symbol <- mapIds(org.Hs.eg.db,
keys=SFI_NITens.str,
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
resSFI_NIT$entrez <- mapIds(org.Hs.eg.db,
keys=SFI_NITens.str,
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
# Chunk 66
ELI_NITens.str <- substr(rownames(resELI_NIT), 1, 15)
resELI_NIT$symbol <- mapIds(org.Hs.eg.db,
keys=ELI_NITens.str,
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
resELI_NIT$entrez <- mapIds(org.Hs.eg.db,
keys=ELI_NITens.str,
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
# Chunk 67
ELI_SFIens.str <- substr(rownames(resELI_SFI), 1, 15)
resELI_SFI$symbol <- mapIds(org.Hs.eg.db,
keys=ELI_SFIens.str,
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
resELI_SFI$entrez <- mapIds(org.Hs.eg.db,
keys=ELI_SFIens.str,
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
# Chunk 68
resSFI_NITOrdered <- resSFI_NIT[order(resSFI_NIT$pvalue),]
head(resSFI_NITOrdered)
# Chunk 69
resELI_NITOrdered <- resELI_NIT[order(resELI_NIT$pvalue),]
head(resELI_NITOrdered)
# Chunk 70
resELI_SFIOrdered <- resELI_SFI[order(resELI_SFI$pvalue),]
head(resELI_SFIOrdered)
# Chunk 71
resSFI_NITOrderedDF <- as.data.frame(resSFI_NIT)[1:100, ]
write.csv(resSFI_NITOrderedDF, file=file.path(resultsDir, "resSFI_NITOrderedDF.csv"))
# Chunk 72
resELI_NITOrderedDF <- as.data.frame(resELI_NIT)[1:100, ]
write.csv(resELI_NITOrderedDF, file=file.path(resultsDir, "resELI_NITOrderedDF.csv"))
# Chunk 73
resELI_SFIOrderedDF <- as.data.frame(resELI_SFI)[1:100, ]
write.csv(resELI_SFIOrderedDF, file=file.path(resultsDir, "resELI_SFIOrderedDF.csv"))
# Chunk 74
library("genefilter")
library("SummarizedExperiment")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)
mat  <- assay(vsd)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("Group","sex")])
pheatmap(mat, annotation_col = anno)
resSFI_NITOrderedDF
require(GOstats)
listOfTables <- list(SFIVsNIT = resSFI_NITOrderedDF, ELIVsNIT = resELI_NITOrderedDF, ELIVsSFI = resELI_SFIOrderedDF)
for (i in 1:length(listOfTables))
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el análisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab["entrez"], "hgu133a.db"))
# Escogemos los grupos de sondas a incluir en el análisis
# Este análisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
whichGenes<-topTab["padj"]<0.05
geneIds <- unique(entrezUniverse[whichGenes])
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
require(GOstats)
listOfTables <- list(SFIVsNIT = resSFI_NITOrderedDF, ELIVsNIT = resELI_NITOrderedDF, ELIVsSFI = resELI_SFIOrderedDF)
for (i in 1:length(listOfTables))
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el análisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(topTab["entrez"])
# Escogemos los grupos de sondas a incluir en el análisis
# Este análisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
whichGenes<-topTab["padj"]<0.05
geneIds <- unique(entrezUniverse[whichGenes])
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
require(hgu95av2.db)
require(GOstats)
listOfTables <- list(SFIVsNIT = resSFI_NITOrderedDF, ELIVsNIT = resELI_NITOrderedDF, ELIVsSFI = resELI_SFIOrderedDF)
for (i in 1:length(listOfTables))
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el análisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab["entrez"], "hgu133a.db"))
# Escogemos los grupos de sondas a incluir en el análisis
# Este análisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
whichGenes<-topTab["padj"]<0.05
geneIds <- unique(entrezUniverse[whichGenes])
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
library(annotate)
require(hgu95av2.db)
require(GOstats)
listOfTables <- list(SFIVsNIT = resSFI_NITOrderedDF, ELIVsNIT = resELI_NITOrderedDF, ELIVsSFI = resELI_SFIOrderedDF)
for (i in 1:length(listOfTables))
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el análisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab["entrez"], "hgu133plus2.db"))
# Escogemos los grupos de sondas a incluir en el análisis
# Este análisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
whichGenes<-topTab["padj"]<0.05
geneIds <- unique(entrezUniverse[whichGenes])
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
library(annotate)
require(hgu95av2.db)
require(GOstats)
listOfTables <- list(SFIVsNIT = resSFI_NITOrderedDF, ELIVsNIT = resELI_NITOrderedDF, ELIVsSFI = resELI_SFIOrderedDF)
for (i in 1:length(listOfTables))
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el análisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab["entrez"], "hgu133a.db"))
# Escogemos los grupos de sondas a incluir en el análisis
# Este análisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
whichGenes<-topTab["padj"]<0.05
geneIds <- unique(entrezUniverse[whichGenes])
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
require(annotate)
require(hgu133a.db)
require(GOstats)
listOfTables <- list(SFIVsNIT = resSFI_NITOrderedDF, ELIVsNIT = resELI_NITOrderedDF, ELIVsSFI = resELI_SFIOrderedDF)
for (i in 1:length(listOfTables))
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el análisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab["entrez"], "hgu133a.db"))
# Escogemos los grupos de sondas a incluir en el análisis
# Este análisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
whichGenes<-topTab["padj"]<0.05
geneIds <- unique(entrezUniverse[whichGenes])
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
require(annotate)
require(hgu133a.db)
BiocManager::install("hgu133a.db")
require(annotate)
require(hgu133a.db)
require(GOstats)
listOfTables <- list(SFIVsNIT = resSFI_NITOrderedDF, ELIVsNIT = resELI_NITOrderedDF, ELIVsSFI = resELI_SFIOrderedDF)
for (i in 1:length(listOfTables))
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el análisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab["entrez"], "hgu133a.db"))
# Escogemos los grupos de sondas a incluir en el análisis
# Este análisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
whichGenes<-topTab["padj"]<0.05
geneIds <- unique(entrezUniverse[whichGenes])
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
install.packages("dplyr")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
-- Remove rlang
rm(rlang)
remove.packages("rlang")
install.packages("https://cran.r-project.org/src/contrib/rlang_0.4.6.tar.gz", repo=NULL, type="source")
install.packages("rlang")
install.packages("rlang")
